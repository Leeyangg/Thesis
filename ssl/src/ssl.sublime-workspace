{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inp",
				"inputMap"
			],
			[
				"input",
				"inputDepthMap"
			],
			[
				"in",
				"inputImage"
			],
			[
				"des",
				"desiredSizeInputMap"
			],
			[
				"pa",
				"path2ProtoFile"
			],
			[
				"path",
				"path2Caffemodel"
			],
			[
				"en",
				"endl"
			],
			[
				"inc",
				"include"
			],
			[
				"type",
				"inputMapType"
			],
			[
				"num",
				"numberCurrentImage"
			],
			[
				"image",
				"imageEmpty"
			],
			[
				"re",
				"return"
			],
			[
				"depth",
				"depth_merged"
			],
			[
				"push",
				"push_mat_pred"
			],
			[
				"err",
				"err_a"
			],
			[
				"pu",
				"push_mat_gt"
			],
			[
				"images",
				"images_path_format"
			],
			[
				"frame",
				"frame_counter"
			],
			[
				"weig",
				"weight_mat"
			],
			[
				"merged",
				"merged_points"
			],
			[
				"ori",
				"original_image"
			],
			[
				"map",
				"map_color"
			],
			[
				"fra",
				"frame_counter"
			],
			[
				"or",
				"original_image"
			],
			[
				"ite",
				"iter_"
			],
			[
				"zed",
				"zed_input"
			],
			[
				"ze",
				"zed_input"
			],
			[
				"dept",
				"depth_confidence"
			],
			[
				"end",
				"endif"
			],
			[
				"av",
				"av_depth"
			],
			[
				"ima",
				"im_float"
			],
			[
				"im",
				"image_resize"
			],
			[
				"e",
				"else"
			],
			[
				"arg",
				"argc"
			],
			[
				"n",
				"n_channels"
			],
			[
				"a",
				"argc"
			],
			[
				"label",
				"labels"
			],
			[
				"lab",
				"labels"
			],
			[
				"par",
				"partial2"
			],
			[
				"part",
				"partial1"
			],
			[
				"m",
				"map_gt"
			],
			[
				"rmse_lo",
				"rmse_log_inv"
			],
			[
				"rm",
				"rmse_lin"
			],
			[
				"rmse",
				"rmse_log_inv"
			],
			[
				"rs",
				"rmse_log"
			],
			[
				"ma",
				"map_pred"
			]
		]
	},
	"buffers":
	[
		{
			"file": "ssl.cpp",
			"settings":
			{
				"buffer_size": 901,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "ssl.h",
			"settings":
			{
				"buffer_size": 107,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/manageObjectCnn.cpp",
			"settings":
			{
				"buffer_size": 2568,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/manageObjectCnn.h",
			"settings":
			{
				"buffer_size": 841,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/manageObjectInputMap.cpp",
			"settings":
			{
				"buffer_size": 3538,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "includes/manageObjectInputMap.h",
			"settings":
			{
				"buffer_size": 984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"merger.h\"\n\n\nint main(int argc, char** argv)\n{\n \nCaffe::set_mode(Caffe::CPU);\n   /* \n    --------------------------------------------------------------------------------------------------      \n    Setup models and image\n    --------------------------------------------------------------------------------------------------   \n    */  \n    if (argc == 1) {\n        std::cout <<  \"Select setup:\" << std::endl;\n        std::cerr << \"1: Run mix_lstm cnn \" <<  std::endl\n                  << \"2: Run mix_eigen cnn \" << std::endl\n                  << \"3: Run mix_fcn cnn\" << std::endl;\n\n        std::cin >> user_input;\n\n        switch (user_input)\n        {\n            case 1:\n            \t path_to_protofile  = \"../mix_lstm/mix_lstm_deploy.prototxt\";\n            \t path_to_modelcaffe = \"../mix_lstm/mix_lstm.caffemodel\";\n                lstm = true;  \n                break;\n           \n            case 2:\n                path_to_protofile  = \"../mix_eigen/mix_eigen_deploy.prototxt\";\n            \tpath_to_modelcaffe = \"../mix_eigen/m.caffemodel\";\n                eigen = true;\n                break;\n          \n            case 3:\n                path_to_protofile  = \"../mix_fcn/mix_fcn_deploy.prototxt\";\n            \tpath_to_modelcaffe = \"../mix_fcn/mix_fcn.caffemodel\";\n                fcn = true;\n\t\t\t\t\tbreak;\n\n            default:\n                std::cerr << \"  Please select a correct option \" << std::endl;\n                return 0;\n        }\n\n\n        std::cout <<  \"Video -> 1 \" << std::endl << \"ZED -> 2\" << std::endl << \"Image Sequence -> 3\"  << std::endl;\n        std::cin.sync();\n        std::cin >> user_input;\n\n\t\t if( user_input == 1){\n\n           std::cout <<  \"Insert path to video:\" << std::endl;\n\t\t\t  std::cin >> path_video;\n\t\t\t  vid_input = true;\n\t\t      vid.open(path_video);\n\n\t        if(!vid.isOpened()){\n\t\t\t\tstd::cout << \"FAILED OPEN VIDEO FILE'\" << std::endl; \n              return -1;\n           }\n        }\n\n\t\t else if(user_input == 2){\n\n\t\t    #ifdef COMPILE_ZED\n\t\t    \tzed_input = true;\n\t\t    #else\n\n\t\t    \tstd::cout << \"ERROR: ZED NOT FOUND\" << std::endl;\n\t\t    \treturn 0;\n\n\t\t     #endif\n       }\n\n\t\t else if(user_input == 3){\n            std::cout <<  \"Insert path to PNG image directory:\" << std::endl;\n          //  path_frame = \"/home/diogo/Desktop/datasets/mine/depth_maps/7/images/left/\";\n             path_frame = \"/media/diogo/cnn/depth_maps/images/left/\";\n\t\t\t//std::cin >> path_frame;             path_frame = \"/media/diogo/cnn/depth_maps/images/left/\";\n \t\t\t//std::cin.sync();\n\n            std::cout <<  \"Insert path to PNG depth directory:\" << std::endl;\n\t\t\t//std::cin >> path_depth;\n            path_depth  = \"/media/diogo/cnn/depth_maps/depths/gt/\";\n            //path_depth = \"/home/diogo/Desktop/datasets/mine/depth_maps/7/depths/gt/\";\n \t\t\t//std::cin.sync();\n\n            std::cout <<  \"Insert sequence log title:\" << std::endl;\n\t\t\t//std::cin >> images_path_format;\n\t\t\tif(images_path_format == \"empty\")\n\t\t\t\timages_path_format = \"\";\n\t\t\tim_seq = true;\n\t\t\timages_path_format = \"20000_\";\n\n\n       }\n\n\t\t else{\n                std::cerr << \"  Please select a correct option \" << std::endl;\n                return 0;\n       }\n    }\n\n    else if (argc == 3){\n\n\n\t\tif ( (file_proto = fopen(argv[1], \"r\")) && (file_caffe_model = fopen(argv[2], \"r\"))) {\n\t\t    net_.reset(new Net<float>(argv[1], TEST));\n\t\t    net_->CopyTrainedLayersFrom(argv[2]);\n\t\t    image = cv::imread(argv[3],CV_LOAD_IMAGE_COLOR);\n\t\t    input_layer = net_->input_blobs()[0];\n\t    }\n\n\n    }\n\n    else{\n        std::cerr << \"Invalid input... \" << std::endl;\n        std::cout << \" -path_to_protofile -path_to_modelcaffe -path_to_image \" <<  std::endl;\n        return 0;\n     \n    }\n\n    /*\n    --------------------------------------------------------------------------------------------------      \n    Setup ZED\n    --------------------------------------------------------------------------------------------------   \n    */  \n\t   if(zed_input){\n\t#ifdef COMPILE_ZED\n\n\t\t zed = new sl::zed::Camera(sl::zed::HD720);\n\t    fx = zed->getParameters()->LeftCam.fx; \n\t    baseline = zed->getParameters()->baseline;\n\t\t zed->setDepthClampValue(MAX_DEPTH_ZED);\t\n\n\t    //init WITH self-calibration (- last parameter to false -)\n\t    sl::zed::ERRCODE err = zed->init(sl::zed::MODE::PERFORMANCE, 0,true,false,false);\n\n\t    std::cout <<\"ErrCode : \"<<sl::zed::errcode2str(err) << std::endl;\n\n\t    // Quit if an error occurred\n\t\tif (err != sl::zed::SUCCESS) {\n\t        delete zed;\n\t        return 1;\n\t    }\n\n\t    width = zed->getImageSize().width;\n\t    height = zed->getImageSize().height;\n\t    imagezed.create(height, width, CV_32FC3);\n\t    image.create(height, width, CV_32FC3);\n\t    cv::Mat init_depth_zed_mat(height, width, CV_8UC4,1);\n\t\t#endif\n\n      } \n\n      else{\n\t    image = cv::imread(path_frame + images_path_format + \"1.png\", 1);\n\t   // image = cv::imread(\"/media/diogo/cnn/depth_maps/images/left/20000_1.png\", 1);\n\t\t\t if(! image.data ){\n\t\t\t\tstd::cout <<  \" Could not open or find image\" << std::endl ;\n\t\t\t\treturn -1;\n\t\t\t }\n\n\t\t\theight = image.rows;\n\t\t\twidth  = image.cols;\n      \n\t\t}\n\n      /*\n    --------------------------------------------------------------------------------------------------      \n     Setup CNN\n    --------------------------------------------------------------------------------------------------   \n    */  \n  \n    if ( (file_proto = fopen(path_to_protofile.c_str(), \"r\")) && (file_caffe_model = fopen(path_to_modelcaffe.c_str(), \"r\"))  ){\n                    fclose(file_proto);\n                    fclose(file_caffe_model);\n                    net_.reset(new Net<float>(path_to_protofile.c_str(), TEST));\n                    net_->CopyTrainedLayersFrom(path_to_modelcaffe.c_str());\n                    input_layer = net_->input_blobs()[0];              \n   \t\t\t\t\tinput_geometry_ = cv::Size(input_layer->width(), input_layer->height()); \n    } \n\n    else {\n\t    std::cout << path_to_protofile << \"or\" << path_to_modelcaffe <<  \"does not exist\" << std::endl;\n\t    return 0;\n\t}  \n\n\n    /*\n    --------------------------------------------------------------------------------------------------      \n     Allocate memory for all the required depth maps\n    --------------------------------------------------------------------------------------------------   \n    */\n\n\tif(lstm || fcn)\n    \toutput_norm = net_->blob_by_name(\"depth\");   \n\n    else if(eigen)\n \t\toutput_norm = net_->blob_by_name(\"fine_depth\"); \n  \n  \toutput_layer = net_->output_blobs()[0];\n  \t\n\toutput_geo = cv::Size(output_layer->width(),output_layer->height());\n\tdepth_cnn.create(cv::Size(output_geo.width,output_geo.height),CV_32FC1);\n\tcv::Mat depth_cnn_raw;\n\tdepth_cnn_raw.create(cv::Size(output_geo.width,output_geo.height),CV_32FC1);\n  \tdepth_cnn_un.create(cv::Size(output_geo.width,output_geo.height),CV_32FC1);\n\n    //Depth Matrices\n\tcv::Mat un_depth(height, width, CV_32FC1);\n    cv::Mat nn_zed_depth(height, width, CV_8UC4);\n\tcv::Mat zed_map_un_resized(output_geo.height, output_geo.width,CV_32FC1);        \n\tcv::Mat n_zed_depth_im_seq(height, width, CV_8UC1);\n    cv::Mat n_zed_depth_im_seq_resized(output_geo.height, output_geo.width, CV_8UC1);\n\tcv::Mat zed_map_nn_resized(output_geo.height, output_geo.width,CV_32FC1);  \n\tcv::Mat depth_zed(output_geo.height, output_geo.width,CV_32FC1); \n\tcv::Mat depth_confidence(height, width, CV_32FC1);\n    depth_confidence.create(output_geo.height, output_geo.width, CV_32FC1);\n\tcv::Mat depth_conf_im_seq(height, width, CV_8UC1);\n    cv::Mat depth_conf_im_seq_resized(output_geo.height, output_geo.width, CV_8UC1);\n    cv::Mat depth_err(output_geo.height,output_geo.width,CV_32FC1);\n\tcv::Mat depth_err_m(output_geo.height,output_geo.width,CV_32FC1);\n    cv::Mat depth_merged(output_geo.height,output_geo.width,CV_32FC1);\n    cv::Mat merged_points(output_geo.height,output_geo.width,CV_32FC1);\n    weight_mat.create(cv::Size(output_geo.width,output_geo.height),CV_32FC1); \n    \n    /*\n    --------------------------------------------------------------------------------------------------      \n     Extract frame -> Compute depth maps -> \tPost-processing -> Plot\n    --------------------------------------------------------------------------------------------------   \n    */\n\n    std::ofstream myfile;\n    myfile.open (\"errors.txt\");\n\n\n    for(;;){\n\n    \t\n\t    frame_counter++;\n        //std::cout << frame_counter << std::endl;\n\t\t#ifdef COMPILE_ZED\n\t\t\tif(zed_input){     \n\t\t\t    if (!zed->grab(dm_type)){\n\t\t\t       // Retrieve left color image\n\t\t\t\t\t slMat2cvMat(zed->retrieveImage(sl::zed::SIDE::LEFT)).copyTo(imagezed);\n\t\t\t       imagezed.copyTo(image);\n\t\t\t    }\n\t        }\n\t\t#endif\n\n\t\tif(vid_input){\n\t\t\tvid >> image;\n\t\t}\n\n \t\tif(im_seq){\n\n\t\t\t//image = cv::imread(\"/media/diogo/cnn/depth_maps/images/left\" + std::to_string(frame_counter)+ \".png\", 1);\n\t    image = cv::imread(path_frame + images_path_format + std::to_string(frame_counter)+ \".png\", 1);\n\n\t\t\tif(! image.data ){\n\t\t\t\t\t  std::cout <<  \" Could not open or find image\" << std::endl ;\n\t\t\t\t\t  return -1;\n\t\t\t\t }\n\t\t}\n\n\n        if(image.cols != input_geometry_.width || image.rows != input_geometry_.height ) \n            cv::resize(image, image, input_geometry_);\n\n        cv::Mat original_image(input_geometry_.height, input_geometry_.width ,CV_32FC3);         \n  \t     image.copyTo(original_image);\n        image.convertTo(image, CV_32FC3);\n\n        /*\n        --------------------------------------------------------------------------------------------------      \n         Load data\n        --------------------------------------------------------------------------------------------------   \n        */\n\n\t\tinput_data = input_layer->mutable_cpu_data();\n\t\tnchannels = input_layer->channels();\n\t\t\n        for (int i = 0; i < nchannels; ++i) {\n\t\t         cv::Mat channel(input_geometry_.height,input_geometry_.width, CV_32FC1, input_data);\n\t\t         input_channels.push_back(channel);\n\t\t         input_data += input_geometry_.width * input_geometry_.height;\n        }\n\n     \tcv::split(image, input_channels);\n        CHECK(reinterpret_cast<float*>(input_channels.at(0).data)  == net_->input_blobs()[0]->cpu_data()) << \"Input channels are not wrapping the input layer of the network.\";\n       \n\n        begin_mem_output = output_norm->cpu_data();\n\n        /*\n        --------------------------------------------------------------------------------------------------      \n        Compute output and map to depth matrix from CNN and Zed\n        --------------------------------------------------------------------------------------------------   \n        */\n\n        //Forward pass\n        std::cout << \"START\" << std::endl;\n        start = std::clock();\n\t\t net_->Forward();\n\t\tduration = ( std::clock() - start ) / (double) CLOCKS_PER_SEC;\n\n\t\tstd::cout << duration << std::endl;\n\t\treturn 0;\n\n\t\tif(!im_seq){\n\n\t\t\t#ifdef COMPILE_ZED\n\t\t\t\t//Zed Unnormalized depth\n\t\t\t    slMat2cvMat(zed->retrieveMeasure(sl::zed::MEASURE::DEPTH)).copyTo(un_depth);  \n\t\t\t\tcv::resize(un_depth,zed_map_un_resized, output_geo); \n\n\t\t\t\t//Zed Normalized depth\n\t\t\t    slMat2cvMat(zed->normalizeMeasure(sl::zed::MEASURE::DEPTH)).copyTo(nn_zed_depth);  \n\t\t\t\tcv::resize(nn_zed_depth,zed_map_nn_resized, output_geo);\n\n\t\t\t\t//Zed depth confidence map\n\t\t\t\tslMat2cvMat(zed->retrieveMeasure(sl::zed::MEASURE::CONFIDENCE)).copyTo(depth_confidence); \n\t\t\t\tcv::resize(depth_confidence, depth_confidence, output_geo);\t \n\n\n\t\t\t#else\n\n\t\t\t#endif\t\t \n        }\n\n\t\telse{\n\t\t\t\n\t\t\t//n_zed_depth_im_seq =  cv::imread(\"/media/diogo/cnn/depth_maps/depths/gt/\" + std::to_string(frame_counter)+ \".png\", 1);\n\t\t\tn_zed_depth_im_seq =  cv::imread(path_depth + images_path_format + std::to_string(frame_counter)+ \".png\", 1);\n\n\t\t    if(!n_zed_depth_im_seq.data ){\n\t\t\t\tstd::cout <<  \"Could not open or find the image\" << std::endl ;\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tcv::resize(n_zed_depth_im_seq,n_zed_depth_im_seq_resized, output_geo);\n\n\t\t\tif(IMPORT_CONFIDENCE){\n\t\t    \tdepth_conf_im_seq =  cv::imread(\"/media/diogo/cnn/depth_maps/depths/confidence/20000_\" + std::to_string(frame_counter)+ \".png\", 1);\n\n\t\t    \tif(!depth_conf_im_seq.data ){\n\t\t\t\t\tstd::cout <<  \"Could not open or find confidence map\" << std::endl ;\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tcv::resize(depth_conf_im_seq,depth_conf_im_seq_resized, output_geo);\n\t\t\t}\n\t\t }\n\n\t\tfloat mean_cnn=0.0, mean_zed =0.0;\t\n        int aux = 0;\t\n\n        for(int h=0 ; h <output_geo.height ; h++){\n\t\n\t\t\tcv::Point_<int> curr_coor;\n\t\t\t\t\n            for(int w = 0 ; w < output_geo.width; w++){\n\n\t\t\t    if(eigen || fcn)\n\t\t       \tdepth_cnn.at<float>(h,w) = begin_mem_output[w+h*output_layer->width()];///CNN_NORMALIZATION_FACTOR;\n\n\t\t\t\telse\n\t\t\t\t\tdepth_cnn.at<float>(h,w) = begin_mem_output[w+h*output_layer->width()];\n\n\t\t            depth_cnn_raw.at<float>(h,w) = begin_mem_output[w+h*output_layer->width()]*255;\n\t\t\t\t\tdepth_cnn_un.at<float>(h,w)  = depth_cnn.at<float>(h,w)*10;\n\t\t\t\t\n\n\t\t\t\t//Unnormalized depth map\n\t\t\t\tif(zed_input)\n\t\t\t\t\tdepth_zed.at<float>(h,w) = zed_map_un_resized.at<float>(h,w)*0.001;\n\n\t\t\t\telse{\n\t\t\t\t\t depth_zed.at<float>(h,w) = (float)  n_zed_depth_im_seq_resized.data[h*n_zed_depth_im_seq_resized.step + w*n_zed_depth_im_seq_resized.elemSize()]*10000.0/(255*1000.0); \n\n\t\t\t\t\tif(IMPORT_CONFIDENCE)\n\t\t\t        \tdepth_confidence.at<float>(h,w)  = (float) depth_conf_im_seq_resized.data[h*depth_conf_im_seq_resized.step + w*n_zed_depth_im_seq_resized.elemSize()]; \n\t\t\t\t}\n\n\t\t\t\t//std::cout << depth_cnn.at<float>(h,w) << \" \";\n\n\t\t\t\tif(depth_zed.at<float>(h,w) > 0.0 && depth_cnn_un.at<float>(h,w) > 0.0){\n\t\t\t\t\tval_points++; \n\t\t\t\t}\t\t\n\n\t\t\t\tif(depth_confidence.at<float>(h,w) < 30){\n\t\t\t\t         curr_coor.x = w;\n\t\t\t\t\t\t   curr_coor.y = h;\n\t\t\t\t\t\t   coordinates.push_back(curr_coor);\n\t\t\t\t\t\t\tmerged_points.at<float>(h,w) = 1.0;\n\t\t\t\t\t\t}\n\t\t\t\t    \n                  else{\n                      merged_points.at<float>(h,w) = 0.0;\n\t\t\t\t\t\t}\t\n\n\t\t\t\tmean_cnn = mean_cnn + depth_cnn.at<float>(h,w);\t\n\n\t\t\t}\n\n\t\t\t\t\t//std::cout << val_points << std::endl;\n        } \n\n\t\tif(coordinates.size() > 0){\n\t   \t    depth_merged = merge(coordinates, depth_zed, depth_cnn_un, weight_mat, &center_weight);\n\t\t    circle( merged_points, cv::Point_<float>(center_weight.x,  center_weight.y), 5, (255,255,255), -1, 8, 0);\n\t\t}\n\t\t\n\t\telse{\n\t\t   depth_cnn.copyTo(depth_merged);\n\t\t}\n\n\n\t\t// Compare before and after merging\n\t\terrors.push_mat_gt( depth_zed);\n\t\terr_a.push_mat_gt(depth_zed);\n\t\t\n\t\terrors.push_mat_pred( depth_cnn_un);\n\t\terr_a.push_mat_pred(depth_merged);\n\n        std::cout << \"threshold  \" << errors.get_error(\"threshold\") ;//<< std::endl; \n        myfile <<  errors.get_error(\"threshold\")  << \" \";\n        std::cout << \" \" << err_a.get_error(\"threshold\") << std::endl;\n        myfile <<  err_a.get_error(\"threshold\")  << \" \";\n\n\t    std::cout << \"absreldiff  \" << errors.get_error(\"abs_rel_diff\") ;//<< std::endl;\n\t\tmyfile <<  errors.get_error(\"abs_rel_diff\")  << \" \";\n        std::cout << \"  \" << err_a.get_error(\"abs_rel_diff\") << std::endl;\n        myfile <<  err_a.get_error(\"abs_rel_diff\")  << \" \";\n        \n        std::cout << \"sqrreldiff \" << errors.get_error(\"sqr_rel_diff\");// << std::endl;\n        myfile <<  errors.get_error(\"sqr_rel_diff\")  << \" \";\n        std::cout << \"  \" << err_a.get_error(\"sqr_rel_diff\")<< std::endl;\n        myfile <<  err_a.get_error(\"sqr_rel_diff\")  << \" \";\n        \n\n\t    std::cout << \"rmselin \" << errors.get_error(\"rmse_lin\") ;//<< std::endl;\n\t    myfile <<  errors.get_error(\"rmse_lin\")  << \" \";\n        std::cout << \" \" << err_a.get_error(\"rmse_lin\") << std::endl;\n        myfile <<  err_a.get_error(\"rmse_lin\")  << \" \";\n     \n\n\t    std::cout << \"rmselog \" << errors.get_error(\"rmse_log\");// << std::endl;\n\t    myfile <<  errors.get_error(\"rmse_log\")  << \" \";\n        std::cout << \" \" << err_a.get_error(\"rmse_log\") << std::endl;\n        myfile <<  err_a.get_error(\"rmse_log\")  << \" \";\n\n\n        std::cout << \"invscaleerror \" << errors.get_error(\"rmse_log_inv\");// << std::endl ;\n        myfile <<  errors.get_error(\"rmse_log\")  << \" \";\n        std::cout << \"invscaleerror \" << err_a.get_error(\"rmse_log_inv\");// << std::endl ;\n        myfile <<  err_a.get_error(\"rmse_log\")  << \" \";\n\n        myfile << \"\\n \";\n\n\n\n\t\t // if(!on_mouse)\n        cum_err = 0;\n\t    val_points = 0;\n        coordinates.clear();\n\t\tmean_cnn = CNN_NORMALIZATION_FACTOR*mean_cnn/(output_geo.height*output_geo.width);\n        mean_zed = mean_zed/(aux);\n\n\t\t\t//std::cout << \"Mean ZED = \" << mean_zed << \"     Mean CNN = \" << mean_cnn << std::endl;\n\n\n/* \n\t\t float mean[4];\n\n   \t    mean[0] =(cv::sum(depth_zed)[0]/(output_geo.height*output_geo.width));\n mean[1] =(cv::sum(depth_cnn_lstm)[0]/(output_geo.height*output_geo.width));\n mean[2] =(cv::sum(depth_cnn_eigen)[0]/(output_geo.height*output_geo.width));\n mean[3] =(cv::sum(depth_cnn_fcn)[0]/(output_geo.height*output_geo.width));\n\t\t\t\n\t\t\tstd::cout << mean[0] << \" \" << mean[1] << \" \" << mean[2] << \" \" << mean[3] << \" \" <<std::endl;*/\n\t\n\t         //dataLayer_trainnet->Reset(original_image.ptr<float>(0), mean, 1);\n         //dataLayer_trainnet->Reset(im_map, mean, 1);\n\n         //dataLayer_testnet->Reset(cop_depth.ptr<float>(0), mean, 1);\n         //solver->Solve();\n        //net_->ShareTrainedLayersWith(solver->net().get());\n\n\t\t\t  /*\n\t\t\t  --------------------------------------------------------------------------------------------------      \n\t\t\t  Output depth map\n\t\t\t  --------------------------------------------------------------------------------------------------   \n\t\t\t  */\n\n        // CNN map\n\t    if(display == 1)\n\t  \t\tplot_maps(depth_cnn, 255*CNN_NORMALIZATION_FACTOR/NORMALIZATION_FACTOR, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n\t\t//Setup ZED map\n\t \tif(display == 2 && !im_seq)\n   \t\t\tplot_maps(depth_zed, 255/NORMALIZATION_FACTOR, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n\t\tif(display == 3)\n    \t\tplot_maps(depth_zed, 255.0/10.0, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n\t \tif(display == 2 && im_seq)\n   \t\t\tplot_maps(n_zed_depth_im_seq_resized, 1, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n      //Setup Merged map\n\t\tif(display == 4)\n    \t\tplot_maps(depth_merged, 255, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n\t\tif(display == 5)\n    \t\tplot_maps(depth_merged, 255*NORMALIZATION_FACTOR/10, output_geo, cv::COLORMAP_RAINBOW, act_window, save_image, frame_counter);\n\n\t\t//Setup Local weight influence\n\n\t\tif(display == 6)\n    \t\tplot_maps(weight_mat, 255, output_geo, cv::COLORMAP_BONE, act_window, save_image, frame_counter);\n    \n\t    //Display other maps\n\t\tif(display == 7)\n\t\t\tcv::imshow(act_window, merged_points);\n\n\t\tif(display == 8)\n\t\t\tcv::imshow(act_window, zed_map_nn_resized);\n\n\t\tif(display == 9)\n    \t\tplot_maps(depth_confidence, 1, output_geo, -1, act_window, save_image, frame_counter);\n\n\t    cv::imshow(\"Original image\", original_image);\n\n\t\tif(save_image){\n\t\t\tcv::imwrite(\"../images/original.jpeg\", original_image);\n\t\t\tcv::imwrite(\"../images/normalized.jpeg\", zed_map_nn_resized);\n       \t\tcv::imwrite(\"../images/merged.jpeg\", merged_points);\n\t    }\n\n\t\tchar key = cv::waitKey(30);\n\t    save_image = false;\n\n\t\tswitch(key){\n\t\t\tcase 's':\n\t\t\t\tsave_image = true;\n\n\t\t\tcase 'q':\n\t\t\t\tquit = true;\n\n\t\t\tcase '1':\n\t\t\t\tdisplay = 1;\n\t\t\t    cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Monocular estimation\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\t   \n\t\t\t\tbreak;\n\n\t\t\tcase '2':\n\t\t\t\tdisplay = 2;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Stereo Estimation\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '3':\n\t\t\t\tdisplay = 3;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Stereo Estimation N10\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '4':\n\t\t\t\tdisplay = 4;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Merged Estimation\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '5':\n\t\t\t\tdisplay = 5;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Merged Estimation2\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '6':\n\t\t\t\tdisplay = 6;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Weights influence\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '7':\n\t\t\t\tdisplay = 7;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Points 4 merge\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '8':\n\t\t\t\tdisplay = 8;\n\t\t\t   cv::destroyWindow(act_window);\n\t\t\t\tact_window = \"Zed normalized\";\n\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t\tbreak;\n\n\t\t\tcase '9':\n\t\t\t\tdisplay = 9;\n\t\t\t    \n\t\t\t    if (IMPORT_CONFIDENCE)\n\t\t\t    {\n\t\t\t    \tcv::destroyWindow(act_window);\n\t\t\t    \tact_window = \"Confidence\";\n\t\t\t\t\tcv::namedWindow(act_window, CV_WINDOW_NORMAL);\n\t\t\t    }\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t //cv::imwrite(\"../images/ori.png\", original_image);\n\n   \n\n        if(quit){\n        \tstd::cout << '\\n' << \"Leaving...\" << std::endl;\n        \tcv::destroyAllWindows();\n        \treturn 0;\n        }\n\n      //  std::cout<<\"FPS: \"<< 1/duration <<'\\n';\n\n    }\n\n    return 0;\n}\n",
			"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.cpp",
			"file_size": 21030,
			"file_write_time": 131383027434353578,
			"settings":
			{
				"buffer_size": 21039,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.h",
			"settings":
			{
				"buffer_size": 2634,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.h",
			"settings":
			{
				"buffer_size": 1398,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.cpp",
			"settings":
			{
				"buffer_size": 8849,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/diogo/Desktop/Thesis/ssl",
		"/home/diogo/Desktop/Thesis/ssl/src",
		"/home/diogo/Desktop/Thesis/ssl/src/includes"
	],
	"file_history":
	[
		"/home/diogo/Desktop/Thesis/ssl/CMakeLists.txt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectInputMap.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectInputMap.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/CMakeLists.txt",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.hpp",
		"/home/diogo/Desktop/Thesis/ssl/src/ssl.hpp",
		"/home/diogo/Desktop/Thesis/ssl/src/include/utilities.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.h",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/mix_eigen/mix_eigen_deploy.prototxt",
		"/home/diogo/Desktop/res_prelim/weights/mix_eigen/mix_eigen_fine.prototxt",
		"/home/diogo/Desktop/display_cnn_stereo/build/costs.log",
		"/home/diogo/Thesis/display_cnn_stereo/src/merger.cpp",
		"/home/diogo/Thesis/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Thesis/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Desktop/display_cnn_stereo/mix_eigen/mix_eigen_deploy.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/mix_eigen/mix_eigen_solver.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/results_eigen/costs_file2.log",
		"/home/diogo/Desktop/train_cnn_offline/mix_eigen/mix_eigen.prototxt",
		"/home/diogo/Desktop/datasets/generate_dataset/src/data_set.cpp",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/testt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/trainn.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/trainn.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/testt_gt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/trainn_gt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/testt_gt.txt",
		"/media/diogo/cnn/nyu_shuf/testt.txt",
		"/media/diogo/cnn/nyu_shuf/trainn.txt",
		"/media/diogo/cnn/nyu_shuf/testt_gt.txt",
		"/media/diogo/cnn/nyu_shuf/trainn_gt.txt",
		"/media/diogo/cnn/mine_shuffled/trainn_gt.txt",
		"/media/diogo/cnn/mine_shuffled/trainn.txt",
		"/media/diogo/cnn/mine_shuffled/testt_gt.txt",
		"/media/diogo/cnn/mine_shuffled/testt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/trainn.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/trainn_gt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/testt_gt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/testt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/trainn_gt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/testt.txt",
		"/home/diogo/Desktop/datasets/nyu_shuf/train/labels/labels.txt",
		"/home/diogo/Desktop/train_cnn_offline/results_eigen/costs_file.txt",
		"/home/diogo/Desktop/train_cnn_offline/mix_lstm/mix_lstm.prototxt",
		"/home/diogo/caffe/examples/mnist/lenet_train_test.prototxt",
		"/home/diogo/caffe/src/caffe/solvers/sgd_solver.cpp",
		"/home/diogo/caffe/tools/train_net.cpp",
		"/home/diogo/caffe/tools/finetune_net.cpp",
		"/home/diogo/Desktop/train_cnn_offline/src/train_off.cpp",
		"/home/diogo/caffe/tools/convert_imageset.cpp",
		"/home/diogo/Desktop/Thesis/generate_dataset/src/data_set.cpp",
		"/home/diogo/Thesis/src/merger.cpp",
		"/home/diogo/caffe/tools/test_net.cpp",
		"/home/diogo/Desktop/Thesis/src/include/my_func.cpp",
		"/home/diogo/Desktop/Thesis/src/merger.cpp",
		"/home/diogo/caffe/include/caffe/layers/euclidean_loss_layer.hpp",
		"/media/diogo/diogo/Thesis/src/merger.cpp",
		"/home/diogo/Desktop/train_cnn_offline/mix_fcn/mix_fcn.prototxt",
		"/home/diogo/caffe/src/caffe/layers/euclidean_loss_layer.cpp",
		"/home/diogo/Desktop/datasets/copy/test_gt/labels/labels.txt",
		"/home/diogo/Desktop/train_cnn_offline/mix_fcn/mix_fcn_deploy.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/mix_lstm/mix_lstm_deploy.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/nets/mix_eigen/mix_eigen.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/mix_lstm/mix_lstm_solver.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/src/train_off.h",
		"/home/diogo/Desktop/train_cnn_offline/src/include/my_func.cpp",
		"/home/diogo/Desktop/train_cnn_offline/src/include/my_func.h",
		"/home/diogo/Desktop/generate_dataset/src/data_set.cpp",
		"/home/diogo/caffe/tools/upgrade_net_proto_text.cpp",
		"/home/diogo/Desktop/error/src/include/my_func.cpp",
		"/home/diogo/Desktop/generate_dataset/CMakeLists.txt",
		"/home/diogo/Thesis/CMakeLists.txt",
		"/home/diogo/Desktop/error/src/merger.cpp",
		"/home/diogo/Desktop/error/src/include/merger.h",
		"/media/diogo/diogo/my_func.cpp",
		"/media/diogo/diogo/src/merger.cpp",
		"/home/diogo/Thesis/src/include/my_func.cpp",
		"/home/diogo/Desktop/error/src/include/my_func.h",
		"/home/diogo/Desktop/error/CMakeLists.txt",
		"/home/diogo/Desktop/caffe_d/tools/convert_imageset.cpp",
		"/home/diogo/caffe/examples/cpp_classification/classification.cpp",
		"/home/diogo/Thesis/mix_lstm/mix_lstm_deploy.prototxt",
		"/home/diogo/Thesis/mix_fcn/mix_fcn_deploy.prototxt",
		"/home/diogo/Thesis/mix_eigen/fine_net_deploy.prototxt",
		"/home/diogo/Desktop/tutorial/main.cpp",
		"/home/diogo/Thesis/merger.cpp",
		"/home/diogo/caffe/models/bvlc_reference_caffenet/deploy.prototxt",
		"/home/diogo/caffe/data/ilsvrc12/test.txt"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"testt_gt.txt",
			"trainn_gt.txt",
			"testt_gt.txt",
			"testt.txt",
			"",
			"testt.txt",
			"trainn.txt",
			"trainntxt",
			"trainn_gt.txt",
			"testt.txt",
			"trainn.txt",
			"testt.txt",
			"testt_gt.txt",
			"testt.txt",
			"testt_gt.txt",
			"trainn_gt.txt",
			"trainn.txt",
			"trainn_gt.txt",
			"testt_gt.txt",
			"testt.txt",
			"testt_gt.txt",
			"trainn_gt.txt",
			"trainn.txt",
			"",
			"trainn_gt.txt",
			"trainn.txt",
			"testt_gt.txt",
			"testt.txt trainn.txt trainn_gt.txt testt_gt.txt",
			"testt.txt",
			"Current folder",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"pointerToChannelsOfInputLayer",
			"output",
			"cout",
			"output_",
			"input_channels",
			"inputData",
			"input_data",
			"output_",
			"output",
			"resize",
			"setInputIma",
			"Image",
			"objectInputImage",
			"Ca",
			"can",
			"can't find",
			"start",
			"fake",
			"weight_mat",
			"n_zed_depth_im_seq_resized",
			"resize",
			"[\\w]",
			"I0319 [ \\w]",
			"I0319 [ \\w \\w :\\w \\w:]",
			"I0319 [ \\w\\w :\\w]",
			"I0319 [ \\w\\w :]",
			"I0319 [ \\w :]",
			"I0319 [ \\w : \\w : ]",
			"I0319 [ \\w \\w \\w ]]",
			"I0319 []]",
			"I0319 * * *]",
			"I0319 *  * * ]",
			"I0319 * ]",
			"real loss",
			"batch_size: 32",
			"labels",
			"png 1",
			"png 1 ",
			"nyu_shuf",
			"nyu_",
			"/media/ubuntu/cnn//media/ubuntu/cnn/nyu_shuf/",
			"nyu_",
			"mine_",
			"\\n",
			"$n",
			"\\n",
			"^([\\w\\d\\_\\.\\s\\-]*)$",
			"mine_shuffled/train/labels/",
			"mine_shuffled/train/labels",
			"nyu_shuf/train/labels/",
			"mine_shuffled/test/labels/",
			"nyu_shuf/test/labels",
			"/nyu_shuf/",
			"    batch_size: 1",
			"150",
			"lr_mult: 1 ",
			"lr_mul",
			"lr_mult: ",
			"lr_mult: 1.0",
			":1",
			" lr_mul:1.",
			"path_to_protofile",
			"std::cout",
			"val_points",
			"depth_conf_im_seq",
			"std::cout",
			"frame_counter",
			"n_zed_depth_im_seq_resized",
			"resize",
			"video",
			"depth_conf_im_seq",
			"un_depth",
			"imagezed",
			"layers",
			"lr",
			"seq_delim",
			"conv5_4_vec",
			"conv5_4",
			"TEST",
			"convertTo",
			"pin",
			"user_input",
			"cpu"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Map",
			"manageObjectInputImage",
			"",
			"batch_size: 1",
			"labels/",
			"png",
			"mine_shuffled",
			"nyu_shuf/",
			"/media/ubuntu/cnn/nyu_",
			"/media/ubuntu/cnn/mine_",
			"1 \\n",
			"1",
			"mine_shuffled/train_gt/labels/",
			"mine_shuffled/train/labels/",
			"mine_shuffled/train/labels",
			"mine_shuffled/test_gt/labels",
			"mine_shuffled/test/labels",
			"nyu_shuf/",
			"    batch_size: 32",
			"2",
			"1",
			"50",
			"lr_mult: 0",
			"lr_mult: 0.0"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ssl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 901,
						"regions":
						{
						},
						"selection":
						[
							[
								297,
								297
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "ssl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 107,
						"regions":
						{
						},
						"selection":
						[
							[
								73,
								73
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "includes/manageObjectCnn.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2568,
						"regions":
						{
						},
						"selection":
						[
							[
								2439,
								2439
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1479.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "includes/manageObjectCnn.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 841,
						"regions":
						{
						},
						"selection":
						[
							[
								428,
								428
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "includes/manageObjectInputMap.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3538,
						"regions":
						{
						},
						"selection":
						[
							[
								3538,
								3538
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1651.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "includes/manageObjectInputMap.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 984,
						"regions":
						{
						},
						"selection":
						[
							[
								981,
								981
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21039,
						"regions":
						{
						},
						"selection":
						[
							[
								9651,
								9651
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": -0.0,
						"translation.y": 4515.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2634,
						"regions":
						{
						},
						"selection":
						[
							[
								2183,
								2183
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1090.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1398,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8849,
						"regions":
						{
						},
						"selection":
						[
							[
								6180,
								6180
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "ssl.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
