{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"TO",
				"totalFrames"
			],
			[
				"cu",
				"currentRow"
			],
			[
				"m",
				"min"
			],
			[
				"max",
				"maxConf"
			],
			[
				"faci",
				"facilJSONFile"
			],
			[
				"getINpu",
				"getInputMapResized"
			],
			[
				"dept",
				"depthCnn"
			],
			[
				"co",
				"confidenceMergeAlgorithm"
			],
			[
				"curr",
				"currentRow"
			],
			[
				"CON",
				"convertTo"
			],
			[
				"for",
				"for\tFor Loop"
			],
			[
				"cheap",
				"cheapDepthMap"
			],
			[
				"chea",
				"cheapDepthMap"
			],
			[
				"scale",
				"scaleOriginalCnnMap"
			],
			[
				"ori",
				"scaleOriginalCnnMap"
			],
			[
				"thr",
				"thresholdError"
			],
			[
				"che",
				"cheapDepthMap"
			],
			[
				"curre",
				"currentPixelPrediction"
			],
			[
				"scal",
				"scaleMergedMap"
			],
			[
				"sca",
				"scaleDepthMap"
			],
			[
				"t",
				"true"
			],
			[
				"reso",
				"resolutionOutputMapsJSONFile"
			],
			[
				"re",
				"getAbsoluteDepthMapResized"
			],
			[
				"zed",
				"zedCamObject"
			],
			[
				"NO",
				"NOT_USE_SCALES_"
			],
			[
				"sc",
				"scaleDepthMap"
			],
			[
				"cur",
				"currentPixelGroundTruth"
			],
			[
				"ref",
				"referenceMap"
			],
			[
				"getIn",
				"getInputMapResized"
			],
			[
				"poi",
				"pointsForSSL"
			],
			[
				"po",
				"Point_"
			],
			[
				"sour",
				"sourceCheapDepth"
			],
			[
				"cou",
				"count2"
			],
			[
				"wi",
				"widthMap"
			],
			[
				"he",
				"heightMap"
			],
			[
				"dis",
				"getDisparityMap"
			],
			[
				"stere",
				"stereoSGBM"
			],
			[
				"shuf",
				"shuffle_it"
			],
			[
				"ave",
				"averageDepth"
			],
			[
				"dispa",
				"disparityLabels"
			],
			[
				"de",
				"depthLabels"
			],
			[
				"aver",
				"averageDisparity"
			],
			[
				"di",
				"disparityShuffled"
			],
			[
				"dep",
				"depth"
			],
			[
				"confi",
				"confidenceShuffled"
			],
			[
				"ri",
				"right"
			],
			[
				"righ",
				"rightShuffled"
			],
			[
				"le",
				"left"
			],
			[
				"disp",
				"disparity"
			],
			[
				"con",
				"confidence"
			],
			[
				"left",
				"leftShuffled"
			],
			[
				"depth",
				"depthGT"
			],
			[
				"in",
				"inputMap"
			],
			[
				"inp",
				"inputImageCnn"
			],
			[
				"second",
				"secondMap"
			],
			[
				"nor",
				"normalizeWeight"
			],
			[
				"th",
				"this"
			],
			[
				"vect",
				"vectorNormalizedWeights"
			],
			[
				"compute",
				"computeStdDev"
			],
			[
				"std",
				"stdDev"
			],
			[
				"weight",
				"weightsFile"
			],
			[
				"weigh",
				"weightsFile"
			],
			[
				"reference",
				"referenceMapResized"
			],
			[
				"refe",
				"referenceMapResized"
			],
			[
				"merge",
				"mergeFromConfidenceMap"
			],
			[
				"get",
				"getCnnOutputMap"
			],
			[
				"getOu",
				"getCnnOutputMap"
			],
			[
				"us",
				"useCnnSslJSONFile"
			],
			[
				"conf",
				"confidencePathJSONFile"
			],
			[
				"input",
				"getInputMapResized"
			],
			[
				"use",
				"useImportFromFolderJSONFile"
			],
			[
				"pa",
				"path2ProtoFile"
			],
			[
				"resol",
				"resolutionInputMapsJSONFile"
			],
			[
				"resi",
				"resolution"
			],
			[
				"s",
				"stereoBMOpencv"
			],
			[
				"ster",
				"stereoBMOpencv"
			],
			[
				"ze",
				"zedSourceSdkJSONFile"
			],
			[
				"source",
				"sourceGt"
			],
			[
				"jso",
				"jsonFile"
			],
			[
				"st",
				"stereoSGBM"
			],
			[
				"ste",
				"stereoSGBM"
			],
			[
				"abs",
				"absoluteDepthMap"
			],
			[
				"set",
				"setRightImage"
			],
			[
				"se",
				"stereoBMOpencv"
			],
			[
				"im",
				"leftImage"
			],
			[
				"map",
				"mapWidth"
			],
			[
				"rei",
				"rightImage"
			],
			[
				"colr",
				"colorDepth"
			],
			[
				"gary",
				"grayLeft"
			],
			[
				"gra",
				"grayLeft"
			],
			[
				"per",
				"performanceNoiseMap"
			],
			[
				"mana",
				"manageZEDObject"
			],
			[
				"grab",
				"grabFrameZed"
			],
			[
				"man",
				"manageZEDObject"
			],
			[
				"nois",
				"noiseMatrix"
			],
			[
				"mer",
				"mergeFromConfidenceMap"
			],
			[
				"cnn",
				"cnnDepthMap"
			],
			[
				"costs",
				"costsFile"
			],
			[
				"sa",
				"scaleGroundTruth"
			],
			[
				"setSca",
				"setScaleDepthMap"
			],
			[
				"setS",
				"setScaleDepthMap"
			],
			[
				"me",
				"meanDepthMap"
			],
			[
				"des",
				"desiredSizeInputMap"
			],
			[
				"path",
				"path2Caffemodel"
			],
			[
				"en",
				"endl"
			],
			[
				"inc",
				"include"
			],
			[
				"type",
				"inputMapType"
			],
			[
				"num",
				"numberCurrentImage"
			],
			[
				"image",
				"imageEmpty"
			],
			[
				"push",
				"push_mat_pred"
			],
			[
				"err",
				"err_a"
			],
			[
				"pu",
				"push_mat_gt"
			],
			[
				"images",
				"images_path_format"
			],
			[
				"frame",
				"frame_counter"
			],
			[
				"weig",
				"weight_mat"
			],
			[
				"merged",
				"merged_points"
			],
			[
				"fra",
				"frame_counter"
			],
			[
				"or",
				"original_image"
			],
			[
				"ite",
				"iter_"
			],
			[
				"end",
				"endif"
			],
			[
				"av",
				"av_depth"
			],
			[
				"ima",
				"im_float"
			],
			[
				"e",
				"else"
			],
			[
				"arg",
				"argc"
			],
			[
				"n",
				"n_channels"
			],
			[
				"a",
				"argc"
			],
			[
				"label",
				"labels"
			],
			[
				"lab",
				"labels"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/diogo/SLAMDunk/src/includes/manageObjectCnn.h",
			"settings":
			{
				"buffer_size": 2050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/SLAMDunk/src/includes/manageObjectCnn.cpp",
			"settings":
			{
				"buffer_size": 11034,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/Desktop/Thesis/ssl/src/config/config.json",
			"settings":
			{
				"buffer_size": 2911,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/SLAMDunk/src/ssl.cpp",
			"settings":
			{
				"buffer_size": 15598,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/diogo/SLAMDunk/src/ssl.h",
			"settings":
			{
				"buffer_size": 1500,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"confidenceMergeAlgorithm.h\"\n\nconfidenceMergeAlgorithm::confidenceMergeAlgorithm(){}\n\nconfidenceMergeAlgorithm::~confidenceMergeAlgorithm(){}\n\nvoid confidenceMergeAlgorithm::merge(){\n\n\n\n    this->confidenceMap.convertTo(this->monoDepthMap, CV_32FC1);\n    this->stereoDepthMap.convertTo(this->stereoDepthMap, CV_32FC1);\n    this->monoDepthMap.convertTo(this->monoDepthMap, CV_32FC1);\n\tthis->finalDepthMap.create(this->monoDepthMap.rows,this->monoDepthMap.cols, CV_32FC1);\n\n\n\tfloat averageDepthMono = 0.0;\n\tcv::Mat mergedDepthMap(this->monoDepthMap.rows,this->monoDepthMap.cols, CV_32FC1);\n\tcv::Mat mergedDepthMap2(this->monoDepthMap.rows,this->monoDepthMap.cols, CV_32FC1);\n\tint rowsInputMap = this->monoDepthMap.rows;\n\tint colsInputMap = this->monoDepthMap.cols;\n\tcv::Point_<int> currentPixel;\n\t//double min, max;\n\t\n\tfor (int currentRow = 0; currentRow < rowsInputMap; ++currentRow)\n\t{\n\t\tfor (int currentCol = 0; currentCol < colsInputMap; ++currentCol)\n\t\t{\n\n\t\t\tif(stereoOpenCVJSONFile)\n\t\t\t\tthis->stereoDepthMap.at<float>(currentRow, currentCol) = this->stereoDepthMap.at<float>(currentRow, currentCol)*this->scaleStereoDepthMap;\n\n\t\t\telse\n\t\t\t\tthis->stereoDepthMap.at<float>(currentRow, currentCol) = this->stereoDepthMap.at<float>(currentRow, currentCol)*(19.5/255.0*(-1.0))+20.0;\n\n\t    \tif(!janivanecky)\n\t    \t\tthis->monoDepthMap.at<float>(currentRow, currentCol) = this->monoDepthMap.at<float>(currentRow, currentCol)*(19.5/255.0*(-1.0))+20.0;\n\n\t    \telse{\n\t    \t\tthis->monoDepthMap.at<float>(currentRow, currentCol) = this->monoDepthMap.at<float>(currentRow, currentCol)/255.0*this->scaleMonoDepthMap;\n\n\t    \t\tif(this->monoDepthMap.at<float>(currentRow, currentCol) == 0)\n\t    \t\t\tthis->monoDepthMap.at<float>(currentRow, currentCol) = 0.5;\n\t    \t}\n\n\t\t\taverageDepthMono = this->monoDepthMap.at<float>(currentRow, currentCol) + averageDepthMono;\n\n\t\t}\n\t}\n\t\n\taverageDepthMono = averageDepthMono /(rowsInputMap*colsInputMap);\n\tdouble min, max;\n\tcv::minMaxLoc(this->confidenceMap, &min, &max);\n\tdouble weightNormalized;\n\tfloat  cnnZedNormalized;\n\n\tfor (int currentRow = 0; currentRow < rowsInputMap; ++currentRow)\n\t{\n\t\tfor (int currentCol = 0; currentCol < colsInputMap; ++currentCol)\n\t\t{\n\t\t\tint weight = (int) this->confidenceMap.at<uchar>(currentRow, currentCol);\n\t\t\tweightNormalized =  computeWeight(weight, (int) max);\n\t\t\tmergedDepthMap2.at<float>(currentRow, currentCol) =  this->stereoDepthMap.at<float>(currentRow, currentCol)*weightNormalized + (1-weightNormalized)*this->monoDepthMap.at<float>(currentRow, currentCol);\n\n\t\t\tif(this->monoDepthMap.at<float>(currentRow, currentCol) > this->stereoDepthMap.at<float>(currentRow, currentCol) ){\n\t\t\t\tcnnZedNormalized = computeWeight( this->stereoDepthMap.at<float>(currentRow, currentCol)/20.0,  this->monoDepthMap.at<float>(currentRow, currentCol)/6.0);\n\t\t\t}\n\n\t\t\telse{\n\t\t\t\tcnnZedNormalized = computeWeight( this->monoDepthMap.at<float>(currentRow, currentCol)/6.0,  this->stereoDepthMap.at<float>(currentRow, currentCol)/20.0);\n\t\t\t}\n\n\t\t\t\t//\t\tstd::cout << cnnZedNormalized << \" \";\t\n\t\t\t\tmergedDepthMap.at<float>(currentRow, currentCol) = this->stereoDepthMap.at<float>(currentRow, currentCol)*weightNormalized + (1-weightNormalized)*(  (1- cnnZedNormalized)*this->monoDepthMap.at<float>(currentRow, currentCol)+  this->stereoDepthMap.at<float>(currentRow, currentCol)*cnnZedNormalized );\n\t\t\n\t\t/*\t\n\t\t\t}\n\n\t\t\telse if( (this->confidenceMap.at<float>(currentRow, currentCol) <= 0.0) || currentCol <= 0.05*colsInputMap || currentCol >= 0.95*colsInputMap ){\n\t\t\t\tmergedDepthMap.at<float>(currentRow, currentCol) = this->monoDepthMap.at<float>(currentRow, currentCol) ;\n\n\t\t\t}\n\t\t\n\t\t\telse{\n\t\t\t\tmergedDepthMap.at<float>(currentRow, currentCol) = this->stereoDepthMap.at<float>(currentRow, currentCol) ;\n\t\t\t}\n*/\n\t\t}\n\n\t}\n\n\tmergedDepthMap2.copyTo(this->secondMap);\n\taverageDepthMono = averageDepthMono /(rowsInputMap*colsInputMap);\n\tmergedDepthMap.copyTo(this->finalDepthMap);\n\n\t/// Global Variables\n\tint DELAY_CAPTION = 1500;\n\tint DELAY_BLUR = 100;\n\tint MAX_KERNEL_LENGTH = 6;\n\tcv::Mat copys;\n\tthis->finalDepthMap.copyTo(copys);\n    for ( int i = 1; i < MAX_KERNEL_LENGTH; i = i + 2 )\n         { \n         \tbilateralFilter (copys, this->finalDepthMap, i, i*2, i/2 );\n         }\n}\n\n\ndouble confidenceMergeAlgorithm::computeWeight(double conf, double maxConf){\n\t\n\treturn(1/(1+exp(-(10*conf/maxConf-5))));\n\t//return(conf/maxConf);\n\t/*if(conf/maxConf > 0.5)\n\t\treturn(1.0);\n\telse\n\t\treturn(0.0);*/\n};\n\nvoid confidenceMergeAlgorithm::setmonoDepthMap(cv::Mat inputMonoDepthMap){\n\n\tthis->monoDepthMap.create(inputMonoDepthMap.rows, inputMonoDepthMap.cols, CV_32FC1);\n\tinputMonoDepthMap.copyTo(this->monoDepthMap);\n\n};\n\n\nvoid confidenceMergeAlgorithm::setstereoDepthMap(cv::Mat stereoInputDepthMap){\n\n\tthis->stereoDepthMap.create(stereoInputDepthMap.rows, stereoInputDepthMap.cols, CV_32FC1);\n\tstereoInputDepthMap.copyTo(this->stereoDepthMap);\n\n};\n\nvoid confidenceMergeAlgorithm::setConfidenceMap(cv::Mat inputconfidenceMap){\n\n\tthis->confidenceMap.create(inputconfidenceMap.rows, inputconfidenceMap.cols, CV_32FC1);\n\tinputconfidenceMap.copyTo(this->confidenceMap);\n\n};\n\ncv::Mat confidenceMergeAlgorithm::getSecondMap(){\n\treturn(this->secondMap);\n};\n\ncv::Mat confidenceMergeAlgorithm::getFinalDepthMap(){\n\treturn(this->finalDepthMap);\n};\n\nvoid confidenceMergeAlgorithm::setScaleMonoDepthMap(float newScale){\n\n\tthis->scaleMonoDepthMap = newScale;\n\n}\n\nvoid confidenceMergeAlgorithm::setScaleStereoDepthMap(float newScale){\n\n\tthis->scaleStereoDepthMap = newScale;\n\n}\n",
			"file": "/home/diogo/SLAMDunk/src/includes/confidenceMergeAlgorithm.cpp",
			"file_size": 5494,
			"file_write_time": 131449416044502260,
			"settings":
			{
				"buffer_size": 5496,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/diogo/SLAMDunk",
		"/home/diogo/SLAMDunk/src",
		"/home/diogo/SLAMDunk/src/config",
		"/home/diogo/SLAMDunk/src/includes"
	],
	"file_history":
	[
		"/home/diogo/Desktop/Thesis/ssl/src/includes/confidenceMergeAlgorithm.cpp",
		"/home/diogo/Desktop/Depth-Estimation/net_deploy.prototxt",
		"/home/diogo/Desktop/Depth-Estimation/net_train.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectDepthMap.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/ssl.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/config/config.json",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/confidenceMergeAlgorithm.h",
		"/home/diogo/Desktop/Depth-Estimation/solver.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectCnn.h",
		"/home/diogo/Desktop/Thesis/ssl/nets/solverSSL.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectCnn.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/ssl.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageDepthMapPerformance.cpp",
		"/home/diogo/Desktop/Thesis/ssl/nets/eigenSSL.prototxt",
		"/home/diogo/Desktop/fine_net_deploy.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/build/costsallssldense.txt",
		"/home/diogo/Desktop/rakuten/main.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/facilMergeAlgorithm.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/facilMergeAlgorithm.h",
		"/home/diogo/Desktop/Thesis/ssl/src/config/loadConfiguration.h",
		"/home/diogo/Desktop/Thesis/ssl/src/config/loadConfiguration.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectDepthMap.h",
		"/home/diogo/Desktop/Thesis/ssl/CMakeLists.txt",
		"/home/diogo/Desktop/Thesis/ssl/build/costscnnsparse.txt",
		"/home/diogo/Desktop/resultsThesis/weightsCnnFinalTrain/dense/resultsFine/costs_fine_dense.txt",
		"/home/diogo/Desktop/resultsThesis/weightsCnnFinalTrain/dense/resultsFine/train.txt",
		"/home/diogo/Desktop/resultsThesis/weightsCnnFinalTrain/dense/resultsFine/test.txt",
		"/home/diogo/Desktop/resultsThesis/weightsCnnFinalTrain/dense/resultsFine/logcostsfine.txt",
		"/home/diogo/Desktop/resultsThesis/weightsCnnFinalTrain/sparse/resultsFine/logcostsfine.txt",
		"/home/diogo/Desktop/Thesis/ssl/nets/solverSSLSparse.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/nets/eigenSSLSparse.prototxt",
		"/home/diogo/Thesis/ssl/src/includes/facilMergeAlgorithm.cpp",
		"/home/diogo/Desktop/cnnFinalTrain/dense/resultsCoarse/costs_coarse_dense_second.txt",
		"/home/diogo/Desktop/untitled.txt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageDepthMapPerformance.h",
		"/media/diogo/My Passport/aerospace/shuffled/testSet/disparity/disparityLabels.txt",
		"/home/diogo/s",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectInputMap.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageObjectInputMap.h",
		"/home/diogo/Desktop/Thesis/ssl/nets/eigenSSLSparseFromOpenCV.prototxt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/stereoAlgorithms.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/stereoAlgorithms.cpp",
		"/home/diogo/Desktop/datasets/generate_dataset/src/data_set.cpp",
		"/home/diogo/caffe/src/caffe/layers/euclidean_loss_layer.cpp",
		"/home/diogo/Desktop/Thesis/generate_dataset/src/data_set.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageZEDObject.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.cpp",
		"/home/diogo/Thesis/ssl/src/ssl.cpp",
		"/home/diogo/Thesis/ssl/src/ssl.h",
		"/home/diogo/Desktop/Thesis/ssl/src/config/globalConfig.h",
		"/home/diogo/SmartFit/data/workout.json",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/manageZEDObject.h",
		"/home/diogo/Desktop/Thesis/ssl/src/config/json.hpp",
		"/tmp/mozilla_diogo0/SN3054.conf",
		"/tmp/mozilla_diogo0/SN1010.conf",
		"/usr/local/zed/settings/SN0.conf",
		"/home/diogo/.local/share/Trash/files/calibration.cpp",
		"/etc/hostname",
		"/home/diogo/Desktop/calibration.cpp",
		"/home/diogo/Desktop/OnboardStereoVision_SimDroplet.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/stereo2.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/stereo.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/stereo.h",
		"/home/diogo/Desktop/OnboardStereoVision_SimDroplet.cpp",
		"/home/diogo/SmartFit/src/pages/home/home.html",
		"/home/diogo/SmartFit/src/pages/workout/workout.html",
		"/home/diogo/SmartFit/src/pages/home/home.ts",
		"/home/diogo/SmartFit/src/pages/listwod/listwod.html",
		"/home/diogo/Downloads/myfitness-c71a3-export.json",
		"/home/diogo/Desktop/myfitnessapp/src/app/app.module.ts",
		"/home/diogo/Desktop/OnboardStereoVision_SimDroplet.cxx",
		"/home/diogo/Desktop/myfitnessapp/src/pages/hello-ionic/hello-ionic.html",
		"/home/diogo/Desktop/myfitnessapp/src/pages/hello-ionic/hello-ionic.ts",
		"/home/diogo/Desktop/myfitnessapp/src/app/services/posts.service.ts",
		"/home/diogo/Desktop/myfitnessapp/src/pages/list/list.ts",
		"/home/diogo/Desktop/myfitnessapp/src/app/app.component.ts",
		"/home/diogo/Desktop/myfitnessapp/src/app/services/reddit.service.ts",
		"/home/diogo/Desktop/myfitnessapp/src/pages/reddit/reddit.ts",
		"/home/diogo/Desktop/myfitnessapp/src/pages/reddit/reddit.html",
		"/home/diogo/Desktop/myfitnessapp/src/pages/home/home.html",
		"/home/diogo/Desktop/myfitnessapp/www/index.html",
		"/home/diogo/Desktop/myfitnessapp/src/pages/settings/settings.html",
		"/home/diogo/Desktop/myfitnessapp/src/pages/settings/settings.ts",
		"/home/diogo/Desktop/myfitnessapp/src/app/app.html",
		"/home/diogo/Desktop/myfitnessapp/src/index.html",
		"/home/diogo/Desktop/opencv_contrib/modules/stereo/samples/sample.cpp",
		"/home/diogo/Desktop/opencv_contrib/modules/stereo/src/descriptor.cpp",
		"/home/diogo/Desktop/opencv_contrib/modules/stereo/perf/perf_main.cpp",
		"/home/diogo/caffe/src/caffe/solver.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/merger.h",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.h",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/CMakeLists.txt",
		"/home/diogo/Desktop/Thesis/ssl/src/includes/utilities.hpp",
		"/home/diogo/Desktop/Thesis/ssl/src/ssl.hpp",
		"/home/diogo/Desktop/Thesis/ssl/src/include/utilities.cpp",
		"/home/diogo/Desktop/Thesis/display_cnn_stereo/mix_eigen/mix_eigen_deploy.prototxt",
		"/home/diogo/Desktop/res_prelim/weights/mix_eigen/mix_eigen_fine.prototxt",
		"/home/diogo/Desktop/display_cnn_stereo/build/costs.log",
		"/home/diogo/Thesis/display_cnn_stereo/src/merger.cpp",
		"/home/diogo/Thesis/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Thesis/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/display_cnn_stereo/src/include/my_func.h",
		"/home/diogo/Desktop/display_cnn_stereo/src/include/my_func.cpp",
		"/home/diogo/Desktop/display_cnn_stereo/mix_eigen/mix_eigen_deploy.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/mix_eigen/mix_eigen_solver.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/results_eigen/costs_file2.log",
		"/home/diogo/Desktop/train_cnn_offline/mix_eigen/mix_eigen.prototxt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/testt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/trainn.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/trainn.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/testt_gt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/mine_shuffled/trainn_gt.txt",
		"/home/diogo/Desktop/train_cnn_offline/build/nyu_shuf/testt_gt.txt",
		"/media/diogo/cnn/nyu_shuf/testt.txt",
		"/media/diogo/cnn/nyu_shuf/trainn.txt",
		"/media/diogo/cnn/nyu_shuf/testt_gt.txt",
		"/media/diogo/cnn/nyu_shuf/trainn_gt.txt",
		"/media/diogo/cnn/mine_shuffled/trainn_gt.txt",
		"/media/diogo/cnn/mine_shuffled/trainn.txt",
		"/media/diogo/cnn/mine_shuffled/testt_gt.txt",
		"/media/diogo/cnn/mine_shuffled/testt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/trainn.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/trainn_gt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/testt_gt.txt",
		"/home/diogo/Desktop/datasets/mine_shuffled/testt.txt"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<current project>",
			"<current file>",
			"<current project>",
			"<current file>",
			"<current project>",
			"<current file>",
			"<current project>",
			"<current file>",
			"",
			"ssl.cpp",
			"ssl.txt",
			"disparityLabels.txt",
			"disparityLabels",
			"s",
			"",
			"testt_gt.txt",
			"trainn_gt.txt",
			"testt_gt.txt",
			"testt.txt",
			"",
			"testt.txt",
			"trainn.txt",
			"trainntxt",
			"trainn_gt.txt",
			"testt.txt",
			"trainn.txt",
			"testt.txt",
			"testt_gt.txt",
			"testt.txt",
			"testt_gt.txt",
			"trainn_gt.txt",
			"trainn.txt",
			"trainn_gt.txt",
			"testt_gt.txt",
			"testt.txt",
			"testt_gt.txt",
			"trainn_gt.txt",
			"trainn.txt",
			"",
			"trainn_gt.txt",
			"trainn.txt",
			"testt_gt.txt",
			"testt.txt trainn.txt trainn_gt.txt testt_gt.txt",
			"testt.txt",
			"Current folder",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"depthCnn",
			"manageObjectCnn",
			"manageObject",
			"0",
			"data",
			"useCnnSslJSONFile",
			"cout",
			"depthMap",
			"confidenceDepthMap",
			"facilMergeAlgorithm",
			"cout",
			"cheapDepthMap",
			"pointsForSSL",
			"cheapDepthMap",
			"confide",
			"depthCnn.getNumberPixelsForMerge",
			"depthCnn.getNumberPixelsForMerge\\(\\) \\> 0",
			"NOT_LEA",
			"Test",
			"\\(\\* 1 \\= \\d+\\.\\d+ loss\\)",
			"\\(\\* 1 \\= \\d+\\.\\d+ loss \\)",
			"\\(\\* \\ \\= \\d+\\.\\d+ loss \\)",
			"Test net output \\#\\d\\: loss \\= ",
			"\\d+\\:\\d+\\:\\d+\\.\\d+ \\d+ solver\\.cpp\\:\\d+\\]",
			"\\d+\\: I\\d+",
			"\\d+\\:",
			"Test net ",
			"Train net output",
			"test",
			"1303",
			"this->currentPixelPrediction",
			"setScaleDepthMap(1",
			"setScaleDepthMap(1.0)",
			"computePerformance",
			"pointsForSSL",
			"scaleInputDepthMap",
			"scaleMonoDepthMap",
			"zer",
			"scaleInputDepthMap",
			"scaleStereoDepthMap",
			"\\*\\(19.5",
			"*(19.5",
			"groundTruthData",
			"  ",
			"point",
			"secon",
			" l",
			"  l",
			"   l",
			"    l",
			"     l",
			"      l",
			"       l",
			"        l",
			"\\d        l",
			"\\d\\d        l",
			"\\(\\* 1 = \\d\\d.\\d loss\\)",
			"\\(\\* 1 = \\d\\d loss\\)",
			"\\(\\* 1 = \\d\\d\\d loss\\)",
			"\\d\\d\\d        l",
			"\\d\\d\\d       l",
			"204",
			"207",
			"199",
			"210",
			"^\\d\\d\\d",
			" \\(\\* 1 = \\d\\d.\\d\\d\\d\\d loss\\)",
			" \\(\\* 1 = \\d\\d.\\d\\d\\d loss\\)",
			" \\(\\* 1 = \\d\\d.\\d\\d loss\\)",
			" \\(\\* 1 = \\d\\d.\\d\\d loss)",
			" \\( \\* 1 = \\d\\d.\\d\\d loss)",
			"^8",
			"\\(\\)",
			"()",
			"(\\*  loss)",
			"(\\* loss)",
			"(* loss)",
			"1 = \\d\\d\\d.\\d",
			"1 = \\d\\d\\d.\\d\\d",
			"1 = \\d\\d\\d.\\d\\d\\d ",
			" \\d = \\d\\d\\d.\\d\\d\\d loss)",
			"(* \\d = \\d\\d\\d.\\d\\d\\d loss)",
			"]",
			"\\d\\d\\d .\\d\\d\\d\\d\\d\\d",
			"\\d\\d\\d .",
			"\\d\\d\\d ",
			"\\d:",
			"\\d\\d:",
			"\\d\\d\\d:",
			"I\\d",
			"\\d\\d:\\d\\d:\\d\\d",
			"\\d\\d:",
			"\\d",
			"^\\d",
			"^",
			"\\d",
			" Train net output #0:",
			"solver.cpp:237",
			"17960",
			"Train net output #",
			"Train net output #0 ",
			"Train net output #0 loss =",
			"Train net output #",
			"point",
			"performanceMergedMap",
			"performanceSecondMap",
			"mean",
			"NOT_",
			"USE_SCALES_",
			"USE_SCALES",
			"USE_SCAL",
			"computePerfor",
			"depthMapToBeMerged",
			"depthMapToBeMergedCNN",
			"pointsForSSL",
			"gethcar",
			"computePartialsScaleInvariantError",
			"thresholdErrorThreshold",
			"trainSet",
			"depth",
			"CNN6",
			"CNN5",
			"CNN4",
			"CNN3",
			"CNN2",
			"CNN1",
			"absErrorCNN",
			"meanThresholdErrorCNN"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"confidenceMap",
			"confidenceMergeAlgorithm",
			"",
			"scaleGT",
			"l",
			"",
			"l",
			"",
			"testSet",
			"disparity",
			"CNNScene6",
			"CNNScene5",
			"CNNScene4",
			"CNNScene3",
			"CNNScene2",
			"CNNScene1",
			"meanAbsErrorCNN1",
			"absErrorCNN",
			"meanThresholdErrorCNN",
			"thresholdErrorCNN",
			"meanSqrErrorCNN",
			"sqrErrorCNN",
			"meanScaleInvErrorCNN",
			"scaleInvErrorCNN",
			"meanLogRMSEErrorCNN2",
			"logRMSEErrorCNN",
			"meanLinRMSEErrorCNNScene",
			"meanLinRMSEErrorCNNScene1",
			"cene6",
			"cene5",
			"cene4",
			"cene3",
			"cene2",
			"cnn->",
			"solver->",
			"inputDepthMap->",
			"inputConfidenceMap->",
			"inputImage->",
			"Map",
			"manageObjectInputImage",
			"",
			"batch_size: 1",
			"labels/",
			"png",
			"mine_shuffled",
			"nyu_shuf/",
			"/media/ubuntu/cnn/nyu_",
			"/media/ubuntu/cnn/mine_",
			"1 \\n",
			"1",
			"mine_shuffled/train_gt/labels/",
			"mine_shuffled/train/labels/",
			"mine_shuffled/train/labels",
			"mine_shuffled/test_gt/labels",
			"mine_shuffled/test/labels",
			"nyu_shuf/",
			"    batch_size: 32",
			"2",
			"1",
			"50",
			"lr_mult: 0",
			"lr_mult: 0.0"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/diogo/SLAMDunk/src/includes/manageObjectCnn.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2050,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/diogo/SLAMDunk/src/includes/manageObjectCnn.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11034,
						"regions":
						{
						},
						"selection":
						[
							[
								509,
								509
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/diogo/Desktop/Thesis/ssl/src/config/config.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2911,
						"regions":
						{
						},
						"selection":
						[
							[
								2908,
								2908
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 765.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/diogo/SLAMDunk/src/ssl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15598,
						"regions":
						{
						},
						"selection":
						[
							[
								4418,
								4418
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1918.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/diogo/SLAMDunk/src/ssl.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1500,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/diogo/SLAMDunk/src/includes/confidenceMergeAlgorithm.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5496,
						"regions":
						{
						},
						"selection":
						[
							[
								193,
								193
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SLAMDunk.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 457.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
